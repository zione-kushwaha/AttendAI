  pw.Widget _buildWeekdayAttendanceTable(List<AttendanceRecord> records) {
    final weekdayCounts = List.generate(7, (index) => <String, dynamic>{
      'day': _getWeekdayName(index + 1),
      'present': 0,
      'total': 0,
      'percentage': 0.0,
    });

    for (final record in records) {
      final weekday = record.date.weekday - 1; // 0-indexed
      weekdayCounts[weekday]['total'] = (weekdayCounts[weekday]['total'] as int) + 1;
      if (record.status == AttendanceStatus.present) {
        weekdayCounts[weekday]['present'] = (weekdayCounts[weekday]['present'] as int) + 1;
      }
    }

    // Calculate percentages
    for (final dayData in weekdayCounts) {
      if ((dayData['total'] as int) > 0) {
        dayData['percentage'] = 
            ((dayData['present'] as int) / (dayData['total'] as int) * 100).toDouble();
      }
    }

    return pw.TableHelper.fromTextArray(
      headers: ['Day', 'Present', 'Total', 'Attendance Rate'],
      data: weekdayCounts.map((day) => [
        day['day'],
        '${day['present']}',
        '${day['total']}',
        '${(day['percentage'] as double).toStringAsFixed(1)}%',
      ]).toList(),
      cellAlignment: pw.Alignment.center,
      cellStyle: const pw.TextStyle(fontSize: 10),
      headerStyle: pw.TextStyle(
        fontWeight: pw.FontWeight.bold,
        color: PdfColors.white,
      ),
      headerDecoration: pw.BoxDecoration(
        color: PdfColors.blue700,
      ),
      border: pw.TableBorder.all(color: PdfColors.grey300),
      headerAlignment: pw.Alignment.center,
    );
  }

  pw.Widget _buildAttendanceDistributionCircle(
    String label,
    int count,
    int total,
    PdfColor color,
  ) {
    final percentage = total > 0 ? (count / total * 100) : 0.0;
    
    return pw.Column(
      children: [
        pw.Container(
          width: 100,
          height: 100,
          decoration: pw.BoxDecoration(
            color: PdfColors.white,
            shape: pw.BoxShape.circle,
            border: pw.Border.all(color: color, width: 3),
          ),
          child: pw.Center(
            child: pw.Text(
              '${percentage.toStringAsFixed(1)}%',
              style: pw.TextStyle(
                fontSize: 16,
                fontWeight: pw.FontWeight.bold,
                color: color,
              ),
            ),
          ),
        ),
        pw.SizedBox(height: 10),
        pw.Text(
          label,
          style: pw.TextStyle(
            fontSize: 12,
            fontWeight: pw.FontWeight.bold,
          ),
        ),
        pw.Text(
          '$count / $total',
          style: const pw.TextStyle(fontSize: 10),
        ),
      ],
    );
  }

  String _getWeekdayName(int weekday) {
    switch (weekday) {
      case 1: return 'Monday';
      case 2: return 'Tuesday';
      case 3: return 'Wednesday';
      case 4: return 'Thursday';
      case 5: return 'Friday';
      case 6: return 'Saturday';
      case 7: return 'Sunday';
      default: return '';
    }
  }
